// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: categories.sql

package sqlc

import (
	"context"
	"time"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO category (id, title, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreateCategoryParams struct {
	ID        string
	Title     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory,
		arg.ID,
		arg.Title,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const findManyCategories = `-- name: FindManyCategories :many
SELECT c.id, c.title
FROM category c
ORDER BY c.created_at DESC
`

type FindManyCategoriesRow struct {
	ID    string
	Title string
}

func (q *Queries) FindManyCategories(ctx context.Context) ([]FindManyCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, findManyCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindManyCategoriesRow
	for rows.Next() {
		var i FindManyCategoriesRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
